[{"/Users/jani/Code/Web/dxpaint/src/index.tsx":"1","/Users/jani/Code/Web/dxpaint/src/components/App.tsx":"2","/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx":"3","/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx":"4","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx":"5","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts":"6","/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts":"7","/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts":"8","/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts":"9","/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx":"10","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx":"11","/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx":"12","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts":"13","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts":"14","/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts":"15","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts":"16","/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts":"17","/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts":"18","/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts":"19","/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx":"20","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx":"21","/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx":"22","/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx":"23","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx":"24","/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx":"25","/Users/jani/Code/Web/dxpaint/src/overmind/index.ts":"26","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx":"27","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx":"28","/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx":"29","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts":"30","/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts":"31","/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts":"32","/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts":"33","/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx":"34","/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx":"35","/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx":"36","/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx":"37","/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx":"38","/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx":"39","/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx":"40","/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx":"41","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx":"42","/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx":"43","/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx":"44","/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx":"45","/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx":"46","/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts":"47","/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts":"48","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts":"49","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx":"50","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx":"51","/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts":"52","/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts":"53","/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx":"54","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx":"55","/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx":"56","/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx":"57","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts":"58","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts":"59","/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx":"60","/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx":"61","/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts":"62","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts":"63","/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx":"64","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts":"65","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts":"66","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx":"67","/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx":"68","/Users/jani/Code/Web/dxpaint/src/overmind/undo/actions.ts":"69","/Users/jani/Code/Web/dxpaint/src/components/menubar/Menubar.tsx":"70","/Users/jani/Code/Web/dxpaint/src/tools/util/util.tsx":"71","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/index.ts":"72","/Users/jani/Code/Web/dxpaint/src/overmind/app/state.ts":"73","/Users/jani/Code/Web/dxpaint/src/overmind/undo/UndoBuffer.ts":"74","/Users/jani/Code/Web/dxpaint/src/components/canvas/util.tsx":"75","/Users/jani/Code/Web/dxpaint/src/serviceWorker.ts":"76","/Users/jani/Code/Web/dxpaint/src/tools/FloodFillTool.tsx":"77","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricIndexer.ts":"78","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageRenderer.ts":"79","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricRenderer.ts":"80","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/PaintingCanvasController.ts":"81","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageIndexer.ts":"82","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayCanvasController.ts":"83","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayGeometricRenderer.ts":"84","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayMainCanvasRenderer.ts":"85","/Users/jani/Code/Web/dxpaint/src/canvas/util/util.ts":"86","/Users/jani/Code/Web/dxpaint/src/canvas/ZoomCanvasRenderer.ts":"87","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/ColorIndexer.ts":"88","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/MainCanvasRenderer.ts":"89","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayDrawImageRenderer.ts":"90","/Users/jani/Code/Web/dxpaint/src/domain/LineV.ts":"91","/Users/jani/Code/Web/dxpaint/src/domain/LineH.ts":"92","/Users/jani/Code/Web/dxpaint/src/domain/Line.ts":"93","/Users/jani/Code/Web/dxpaint/src/canvas/util/webglUtil.ts":"94","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxButtonHoverManager.tsx":"95"},{"size":758,"mtime":1581006660054,"results":"96","hashOfConfig":"97"},{"size":1156,"mtime":1619955682098,"results":"98","hashOfConfig":"99"},{"size":2121,"mtime":1619955428184,"results":"100","hashOfConfig":"99"},{"size":4162,"mtime":1620469470404,"results":"101","hashOfConfig":"99"},{"size":1341,"mtime":1609964713351,"results":"102","hashOfConfig":"97"},{"size":99,"mtime":1570358386366,"results":"103","hashOfConfig":"97"},{"size":99,"mtime":1589653071467,"results":"104","hashOfConfig":"97"},{"size":99,"mtime":1581162181250,"results":"105","hashOfConfig":"99"},{"size":407,"mtime":1613232457299,"results":"106","hashOfConfig":"97"},{"size":2967,"mtime":1619968579580,"results":"107","hashOfConfig":"99"},{"size":712,"mtime":1586637521430,"results":"108","hashOfConfig":"99"},{"size":5831,"mtime":1620590852932,"results":"109","hashOfConfig":"99"},{"size":103,"mtime":1589645340777,"results":"110","hashOfConfig":"99"},{"size":238,"mtime":1589698799652,"results":"111","hashOfConfig":"97"},{"size":936,"mtime":1619869526700,"results":"112","hashOfConfig":"99"},{"size":2307,"mtime":1587665133808,"results":"113","hashOfConfig":"97"},{"size":1144,"mtime":1619984736668,"results":"114","hashOfConfig":"99"},{"size":775,"mtime":1598628605933,"results":"115","hashOfConfig":"99"},{"size":11789,"mtime":1620591671153,"results":"116","hashOfConfig":"99"},{"size":3050,"mtime":1619982599429,"results":"117","hashOfConfig":"99"},{"size":2427,"mtime":1598195635333,"results":"118","hashOfConfig":"99"},{"size":4991,"mtime":1619982594647,"results":"119","hashOfConfig":"99"},{"size":3169,"mtime":1619982576072,"results":"120","hashOfConfig":"99"},{"size":2297,"mtime":1619870066504,"results":"121","hashOfConfig":"99"},{"size":749,"mtime":1606592951751,"results":"122","hashOfConfig":"99"},{"size":1069,"mtime":1609948473281,"results":"123","hashOfConfig":"99"},{"size":419,"mtime":1586636737515,"results":"124","hashOfConfig":"97"},{"size":1590,"mtime":1620922525269,"results":"125","hashOfConfig":"99"},{"size":448,"mtime":1606592971846,"results":"126","hashOfConfig":"97"},{"size":349,"mtime":1619984410728,"results":"127","hashOfConfig":"99"},{"size":163,"mtime":1616686264476,"results":"128","hashOfConfig":"97"},{"size":787,"mtime":1610395467992,"results":"129","hashOfConfig":"99"},{"size":3112,"mtime":1619984147301,"results":"130","hashOfConfig":"99"},{"size":2981,"mtime":1619940932376,"results":"131","hashOfConfig":"99"},{"size":2244,"mtime":1619982601701,"results":"132","hashOfConfig":"99"},{"size":1264,"mtime":1619982613307,"results":"133","hashOfConfig":"99"},{"size":2524,"mtime":1619982588090,"results":"134","hashOfConfig":"99"},{"size":4078,"mtime":1619982604334,"results":"135","hashOfConfig":"99"},{"size":620,"mtime":1609948514564,"results":"136","hashOfConfig":"99"},{"size":841,"mtime":1619955333629,"results":"137","hashOfConfig":"99"},{"size":2465,"mtime":1619985414142,"results":"138","hashOfConfig":"99"},{"size":1082,"mtime":1620849760423,"results":"139","hashOfConfig":"99"},{"size":3668,"mtime":1620321511031,"results":"140","hashOfConfig":"99"},{"size":794,"mtime":1589698776952,"results":"141","hashOfConfig":"97"},{"size":5459,"mtime":1620483772984,"results":"142","hashOfConfig":"99"},{"size":1300,"mtime":1619868663600,"results":"143","hashOfConfig":"99"},{"size":99,"mtime":1570358390587,"results":"144","hashOfConfig":"97"},{"size":99,"mtime":1570358382606,"results":"145","hashOfConfig":"99"},{"size":99,"mtime":1570358454848,"results":"146","hashOfConfig":"97"},{"size":479,"mtime":1586285629987,"results":"147","hashOfConfig":"99"},{"size":866,"mtime":1620849748627,"results":"148","hashOfConfig":"99"},{"size":197,"mtime":1589653419630,"results":"149","hashOfConfig":"97"},{"size":1451,"mtime":1619869593932,"results":"150","hashOfConfig":"99"},{"size":2199,"mtime":1619982580512,"results":"151","hashOfConfig":"99"},{"size":3391,"mtime":1619982583302,"results":"152","hashOfConfig":"99"},{"size":1157,"mtime":1619982585809,"results":"153","hashOfConfig":"99"},{"size":2013,"mtime":1619250240403,"results":"154","hashOfConfig":"97"},{"size":99,"mtime":1589645298846,"results":"155","hashOfConfig":"99"},{"size":889,"mtime":1619984421252,"results":"156","hashOfConfig":"99"},{"size":2976,"mtime":1619982608251,"results":"157","hashOfConfig":"99"},{"size":2852,"mtime":1619982610486,"results":"158","hashOfConfig":"99"},{"size":99,"mtime":1570358463891,"results":"159","hashOfConfig":"99"},{"size":3476,"mtime":1606591793814,"results":"160","hashOfConfig":"99"},{"size":2470,"mtime":1619982592203,"results":"161","hashOfConfig":"99"},{"size":221,"mtime":1609964687396,"results":"162","hashOfConfig":"97"},{"size":94,"mtime":1609948309696,"results":"163","hashOfConfig":"99"},{"size":1140,"mtime":1610122119190,"results":"164","hashOfConfig":"97"},{"size":2782,"mtime":1620107155392,"results":"165","hashOfConfig":"99"},{"size":1249,"mtime":1619940421414,"results":"166","hashOfConfig":"99"},{"size":3363,"mtime":1619868670057,"results":"167","hashOfConfig":"99"},{"size":6309,"mtime":1619982534277,"results":"168","hashOfConfig":"99"},{"size":99,"mtime":1609948228471,"results":"169","hashOfConfig":"97"},{"size":129,"mtime":1589653235884,"results":"170","hashOfConfig":"99"},{"size":424,"mtime":1611407191206,"results":"171","hashOfConfig":"99"},{"size":758,"mtime":1616082227415,"results":"172","hashOfConfig":"97"},{"size":5183,"mtime":1615012131754,"results":"173","hashOfConfig":"99"},{"size":3792,"mtime":1619982596856,"results":"174","hashOfConfig":"99"},{"size":5275,"mtime":1619191509501,"results":"175","hashOfConfig":"99"},{"size":2086,"mtime":1619184850511,"results":"176","hashOfConfig":"99"},{"size":4218,"mtime":1619191725461,"results":"177","hashOfConfig":"97"},{"size":9218,"mtime":1619941864058,"results":"178","hashOfConfig":"99"},{"size":5828,"mtime":1619191551996,"results":"179","hashOfConfig":"99"},{"size":5299,"mtime":1619860120527,"results":"180","hashOfConfig":"99"},{"size":4787,"mtime":1619245365397,"results":"181","hashOfConfig":"99"},{"size":1557,"mtime":1618243240466,"results":"182","hashOfConfig":"99"},{"size":1638,"mtime":1619191683528,"results":"183","hashOfConfig":"97"},{"size":1401,"mtime":1620025015387,"results":"184","hashOfConfig":"99"},{"size":4960,"mtime":1619885293571,"results":"185","hashOfConfig":"99"},{"size":1177,"mtime":1619940781531,"results":"186","hashOfConfig":"99"},{"size":5681,"mtime":1619244993476,"results":"187","hashOfConfig":"97"},{"size":565,"mtime":1618726558340,"results":"188","hashOfConfig":"99"},{"size":567,"mtime":1619191463704,"results":"189","hashOfConfig":"99"},{"size":180,"mtime":1618674251371,"results":"190","hashOfConfig":"99"},{"size":1587,"mtime":1617636966253,"results":"191","hashOfConfig":"99"},{"size":1496,"mtime":1620922482659,"results":"192","hashOfConfig":"99"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},"1plr3f1",{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e7kwag",{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"200"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"200"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"200"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"200"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"316","messages":"317","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"200"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"200"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"359","messages":"360","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"200"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"200"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jani/Code/Web/dxpaint/src/index.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/App.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx",[],"/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx",["399","400","401","402"],"import { Tool } from './Tool';\nimport {\n  getMousePos,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  pointEquals,\n  points8Connected,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class FreehandTool implements Tool {\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(): void {\n    overmind.actions.tool.freeHandToolPrevious(null);\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    event.preventDefault();\n  }\n\n  public onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    if (event.buttons && overmind.state.tool.freehandTool.previous) {\n      const mousePos = getMousePos(event);\n      const start = overmind.state.tool.freehandTool.previous;\n      const end = mousePos;\n      if (pointEquals(start, end)) {\n        return; // this point has already been drawn to canvas\n      }\n      if (points8Connected(start, end)) {\n        brushHistory.current.drawPoint(end, paintingCanvasController);\n      } else {\n        brushHistory.current.drawLine(start, end, paintingCanvasController);\n      }\n      overmind.actions.tool.freeHandToolPrevious(end);\n    }\n  }\n\n  public onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n    this.prepareToPaint(isRightMouseButton(event));\n    brushHistory.current.drawPoint(mousePos, paintingCanvasController);\n    overmind.actions.tool.freeHandToolPrevious(mousePos);\n  }\n\n  public onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    this.onInit();\n    overmind.actions.undo.setUndoPoint();\n  }\n\n  public onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    this.onInit();\n  }\n\n  public onMouseEnter(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    if (isLeftOrRightMouseButton(event)) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(event);\n      overmind.actions.tool.freeHandToolPrevious(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    if (event.buttons) {\n      return;\n    }\n    const mousePos = getMousePos(event);\n    brushHistory.current.drawPoint(mousePos, overlayCanvasController);\n  }\n\n  public onMouseDownOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n\n  public onMouseLeaveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx",["403","404"],"import { Tool } from './Tool';\nimport { getMousePos, isLeftMouseButton, isRightMouseButton } from './util/util';\nimport { overmind } from '../index';\nimport { selection } from './util/SelectionIndicator';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class EllipseTool implements Tool {\n  public constructor(filled: boolean) {\n    this.filled = filled;\n  }\n  private filled: boolean;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(): void {\n    //selection.prepare(canvas);\n    overmind.actions.tool.ellipseToolReset();\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    event.preventDefault();\n  }\n\n  public onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    // Do nothing if center point not set, or radius not yet set\n\n    const origin = overmind.state.tool.ellipseTool.origin;\n    if (!origin) {\n      return;\n    }\n    if (!overmind.state.tool.ellipseTool.radiusX || !overmind.state.tool.ellipseTool.radiusY) {\n      return;\n    }\n\n    // Change rotation angle if left mouse button down, otherwise re-adjust radius\n\n    const mousePos = getMousePos(event);\n\n    if (isLeftMouseButton(event)) {\n      const rotationAngle = mousePos.y - origin.y - overmind.state.tool.ellipseTool.radiusY;\n      overmind.actions.tool.ellipseToolAngle(rotationAngle);\n    } else {\n      const radiusX = Math.abs(mousePos.x - origin.x);\n      const radiusY = Math.abs(mousePos.y - origin.y);\n      overmind.actions.tool.ellipseToolRadius({ x: radiusX, y: radiusY });\n    }\n  }\n\n  public onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const origin = overmind.state.tool.ellipseTool.origin;\n    if (!origin) {\n      return;\n    }\n\n    // If radius has not been set, set it and return\n\n    const radiusX = overmind.state.tool.ellipseTool.radiusX;\n    const radiusY = overmind.state.tool.ellipseTool.radiusY;\n    if (!radiusX || !radiusY) {\n      const mousePos = getMousePos(event);\n      overmind.actions.tool.ellipseToolRadius({\n        x: Math.abs(mousePos.x - origin.x),\n        y: Math.abs(mousePos.y - origin.y),\n      });\n      return;\n    }\n\n    // Draw ellipse\n\n    const angle = overmind.state.tool.ellipseTool.angle;\n    if (this.filled) {\n      brushHistory.current.drawFilledEllipse(\n        origin,\n        radiusX,\n        radiusY,\n        angle,\n        paintingCanvasController\n      );\n    } else {\n      brushHistory.current.drawUnfilledEllipse(\n        origin,\n        radiusX,\n        radiusY,\n        angle,\n        paintingCanvasController\n      );\n    }\n    overmind.actions.undo.setUndoPoint();\n    this.onInit();\n  }\n\n  public onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n    if (!overmind.state.tool.ellipseTool.origin) {\n      overmind.actions.tool.ellipseToolOrigin(mousePos);\n      this.prepareToPaint(isRightMouseButton(event));\n    }\n  }\n\n  public onMouseEnter(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    if (!event.buttons) {\n      this.onInit();\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n\n    const origin = overmind.state.tool.ellipseTool.origin;\n    if (!origin) {\n      overlayCanvasController.clear();\n      if (!this.filled) {\n        // DPaint only draws unfilled shapes with the current brush\n        brushHistory.current.drawPoint(mousePos, overlayCanvasController);\n      }\n      //selection.edgeToEdgeCrosshair(ctx, mousePos);\n      return;\n    }\n\n    const radiusX = overmind.state.tool.ellipseTool.radiusX;\n    const radiusY = overmind.state.tool.ellipseTool.radiusY;\n    const newRadiusX = Math.abs(mousePos.x - origin.x);\n    const newRadiusY = Math.abs(mousePos.y - origin.y);\n    const angle = overmind.state.tool.ellipseTool.angle;\n\n    if (this.filled) {\n      overlayCanvasController.clear();\n      brushHistory.current.drawFilledEllipse(\n        origin,\n        radiusX ? radiusX : newRadiusX,\n        radiusY ? radiusY : newRadiusY,\n        angle,\n        overlayCanvasController\n      );\n    } else {\n      overlayCanvasController.clear();\n      brushHistory.current.drawUnfilledEllipse(\n        origin,\n        radiusX ? radiusX : newRadiusX,\n        radiusY ? radiusY : newRadiusY,\n        angle,\n        overlayCanvasController\n      );\n    }\n  }\n\n  public onMouseLeaveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx",["405","406","407"],"import { Tool } from './Tool';\nimport { getMousePos, isRightMouseButton, isLeftOrRightMouseButton } from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class AirbrushTool implements Tool {\n  // TODO fix\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timeout: any = 0;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(): void {\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    event.preventDefault();\n  }\n\n  public onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n    overmind.actions.tool.airbrushToolPosition(mousePos);\n  }\n\n  public onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const draw = (): void => {\n      //TODO: draw in bigger batches, maybe drawDot should accept an array? Or new method\n      // drawDots\n      for (let i = 50; i--; ) {\n        const angle = getRandomFloat(0, Math.PI * 2);\n        const radius = getRandomFloat(0, 20);\n        if (overmind.state.tool.airbrushTool.position) {\n          brushHistory.current.drawPoint(\n            {\n              x: overmind.state.tool.airbrushTool.position.x + radius * Math.cos(angle),\n              y: overmind.state.tool.airbrushTool.position.y + radius * Math.sin(angle),\n            },\n            paintingCanvasController\n          );\n        }\n      }\n      this.timeout = setTimeout(draw, 20);\n    };\n\n    this.prepareToPaint(isRightMouseButton(event));\n    this.timeout = setTimeout(draw, 20);\n  }\n\n  public onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    clearTimeout(this.timeout);\n    this.onInit();\n    overmind.actions.undo.setUndoPoint();\n  }\n\n  public onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    clearTimeout(this.timeout);\n    this.onInit();\n    if (isLeftOrRightMouseButton(event)) {\n      overmind.actions.undo.setUndoPoint();\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    if (event.buttons) {\n      return;\n    }\n    const mousePos = getMousePos(event);\n    brushHistory.current.drawPoint(mousePos, overlayCanvasController);\n  }\n\n  public onMouseDownOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n\n  public onMouseLeaveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n}\n\nfunction getRandomFloat(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx",["408"],"/Users/jani/Code/Web/dxpaint/src/overmind/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx",["409"],"/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx",["410","411","412","413","414"],"/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx",["415"],"/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx",["416","417"],"/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx",["418"],"/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx",["419","420"],"import React, { useRef } from 'react';\nimport { Button, Divider, Slider, Typography } from '@material-ui/core';\nimport './PaletteEditor.css';\nimport { useOvermind } from '../../overmind';\nimport { Color } from '../../types';\nimport { paintingCanvasController } from '../../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../../canvas/overlayCanvas/OverlayCanvasController';\nimport Palette from '../palette/Palette';\n\nexport function PaletteEditor(): JSX.Element | null {\n  const { state, actions } = useOvermind();\n\n  const overlayRef = useRef<HTMLDivElement>(document.createElement('div'));\n\n  if (!state.paletteEditor.isOpen) {\n    return null;\n  }\n\n  function setR(value: number) {\n    const newColor: Color = {\n      r: value,\n      g: state.palette.foregroundColor.g,\n      b: state.palette.foregroundColor.b,\n    };\n    actions.palette.editColor({ colorId: state.palette.foregroundColorId, newColor: newColor });\n    paintingCanvasController.updatePalette();\n    overlayCanvasController.updatePalette();\n  }\n\n  function setG(value: number) {\n    const newColor: Color = {\n      r: state.palette.foregroundColor.r,\n      g: value,\n      b: state.palette.foregroundColor.b,\n    };\n    actions.palette.editColor({ colorId: state.palette.foregroundColorId, newColor: newColor });\n    paintingCanvasController.updatePalette();\n    overlayCanvasController.updatePalette();\n  }\n\n  function setB(value: number) {\n    const newColor: Color = {\n      r: state.palette.foregroundColor.r,\n      g: state.palette.foregroundColor.g,\n      b: value,\n    };\n    actions.palette.editColor({ colorId: state.palette.foregroundColorId, newColor: newColor });\n    paintingCanvasController.updatePalette();\n    overlayCanvasController.updatePalette();\n  }\n\n  const colorMarks = [\n    {\n      value: 0,\n      label: '0',\n    },\n    {\n      value: 255,\n      label: '255',\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"modal-overlay-invisible\" ref={overlayRef}>\n        <div className=\"palette-editor-modal\">\n          <div className=\"modal-header\">\n            <p>Color Palette</p>\n          </div>\n          <Divider variant=\"middle\" />\n          <div className=\"palette-editor-elements\">\n            <div className=\"sliders\">\n              <Slider\n                defaultValue={state.palette.foregroundColor.r}\n                step={1}\n                min={0}\n                max={255}\n                valueLabelDisplay=\"auto\"\n                orientation=\"vertical\"\n                onChange={(event, value) => setR(Number(value))}\n              />\n              <Slider\n                defaultValue={state.palette.foregroundColor.g}\n                step={1}\n                min={0}\n                max={255}\n                valueLabelDisplay=\"auto\"\n                orientation=\"vertical\"\n                onChange={(event, value) => setG(Number(value))}\n              />\n              <Slider\n                defaultValue={state.palette.foregroundColor.b}\n                step={1}\n                min={0}\n                max={255}\n                valueLabelDisplay=\"auto\"\n                orientation=\"vertical\"\n                onChange={(event, value) => setB(Number(value))}\n              />\n            </div>\n            <div className=\"palette-container\">\n              <Palette></Palette>\n            </div>\n          </div>\n          <Button variant=\"contained\" color=\"primary\" onClick={actions.paletteEditor.close}>\n            OK\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={actions.paletteEditor.close}>\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx",["421"],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts",["422","423"],"/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx",["424","425","426","427","428"],"import { Tool } from './Tool';\nimport { getMousePos, extractBrush } from './util/util';\nimport { overmind } from '../index';\nimport { selection } from './util/SelectionIndicator';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class BrushSelector implements Tool {\n  public onInit(): void {\n    overmind.actions.tool.brushSelectionStart(null);\n    //selection.prepare(canvas);\n  }\n\n  public onContextMenu(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    event.preventDefault();\n  }\n\n  public onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const start = overmind.state.tool.brushSelectorTool.start;\n    if (!start) {\n      return;\n    }\n\n    const mousePos = getMousePos(event);\n    const width = mousePos.x - start.x;\n    const height = mousePos.y - start.y;\n\n    const brush = extractBrush(event.currentTarget, start, width, height);\n    overmind.actions.brush.setBrush(brush);\n    overmind.actions.brush.setMode('Matte');\n\n    // exit brush selection tool\n    overmind.actions.toolbox.toggleBrushSelectionMode();\n    // switch to Dotted Freehand tool after selection\n    overmind.actions.toolbox.setSelectedDrawingTool('dottedFreehand');\n  }\n\n  public onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n    overmind.actions.tool.brushSelectionStart(mousePos);\n  }\n\n  public onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overmind.actions.tool.brushSelectionStart(null);\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n\n    const start = overmind.state.tool.brushSelectorTool.start;\n    if (!start) {\n      //selection.edgeToEdgeCrosshair(ctx, mousePos);\n      return;\n    }\n\n    //selection.box(ctx, start, mousePos);\n  }\n\n  public onMouseLeaveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n\n  public onMouseUpOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx",["429","430","431","432"],"/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx",["433","434"],"/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx",["435","436","437","438"],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx",["439","440","441"],"import { Tool } from './Tool';\nimport { getMousePos, isRightMouseButton } from './util/util';\nimport { selection } from './util/SelectionIndicator';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class RectangleTool implements Tool {\n  public constructor(filled: boolean) {\n    this.filled = filled;\n  }\n  private filled: boolean;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(): void {\n    //selection.prepare(canvas);\n    overmind.actions.tool.rectangleToolStart(null);\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    event.preventDefault();\n  }\n\n  public onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const startPoint = overmind.state.tool.rectangleTool.start;\n    if (!startPoint) {\n      return;\n    }\n\n    const endPoint = getMousePos(event);\n\n    if (this.filled) {\n      brushHistory.current.drawFilledRect(startPoint, endPoint, paintingCanvasController);\n    } else {\n      brushHistory.current.drawUnfilledRect(startPoint, endPoint, paintingCanvasController);\n    }\n    overmind.actions.undo.setUndoPoint();\n    this.onInit();\n  }\n\n  public onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    this.prepareToPaint(isRightMouseButton(event));\n    const mousePos = getMousePos(event);\n    overmind.actions.tool.rectangleToolStart(mousePos);\n  }\n\n  public onMouseEnter(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    if (!event.buttons) {\n      this.onInit();\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const mousePos = getMousePos(event);\n\n    const startPoint = overmind.state.tool.rectangleTool.start;\n    if (!startPoint) {\n      if (!this.filled) {\n        // DPaint only draws unfilled shapes with the current brush\n        brushHistory.current.drawPoint(mousePos, overlayCanvasController);\n      }\n      //selection.edgeToEdgeCrosshair(ctx, mousePos);\n      return;\n    }\n\n    if (this.filled) {\n      brushHistory.current.drawFilledRect(startPoint, mousePos, overlayCanvasController);\n    } else {\n      brushHistory.current.drawUnfilledRect(startPoint, mousePos, overlayCanvasController);\n    }\n  }\n\n  public onMouseLeaveOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n\n  public onMouseUpOverlay(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    overlayCanvasController.clear();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx",["442","443","444","445","446"],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx",["447","448","449","450","451"],"/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/Menubar.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/util.tsx",["452"],"import { Point, Color } from '../../types';\nimport { Tool } from '../Tool';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { overmind } from '../../index';\nimport { paintingCanvasController } from '../../canvas/paintingCanvas/PaintingCanvasController';\n\nexport function colorToRGBString(color: Color): string {\n  return 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';\n}\n\nexport function getMousePos(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): Point {\n  const canvas: HTMLCanvasElement = event.currentTarget;\n  const rect = canvas.getBoundingClientRect(); // abs. size of element\n  const scaleX = canvas.width / rect.width; // relationship bitmap vs. element for X\n  const scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n\n  return {\n    x: Math.floor((event.clientX - rect.left) * scaleX), // scale mouse coordinates after they have\n    y: Math.floor((event.clientY - rect.top) * scaleY), // been adjusted to be relative to element\n  };\n}\n\nexport function pointEquals(point1: Point, point2: Point): boolean {\n  return point1.x === point2.x && point1.y === point2.y;\n}\n\nexport function points8Connected(point1: Point, point2: Point): boolean {\n  return Math.abs(point1.x - point2.x) <= 1 && Math.abs(point1.y - point2.y) <= 1;\n}\n\nexport function clearCanvas(canvas: HTMLCanvasElement, color: Color): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ctx.rect(0, 0, canvas.width, canvas.height);\n  const oldFillStyle = ctx.fillStyle;\n  ctx.fillStyle = colorToRGBString(color);\n  ctx.fill();\n  ctx.fillStyle = oldFillStyle;\n}\n\nexport function clearOverlayCanvas(canvas: HTMLCanvasElement): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nexport function getEventHandler(\n  tool: Tool,\n  eventHandlerName:\n    | 'onClick'\n    | 'onContextMenu'\n    | 'onMouseMove'\n    | 'onMouseUp'\n    | 'onMouseDown'\n    | 'onMouseLeave'\n    | 'onMouseEnter'\n    | 'onMouseMoveOverlay'\n    | 'onMouseLeaveOverlay'\n    | 'onMouseEnterOverlay'\n    | 'onMouseUpOverlay'\n    | 'onMouseDownOverlay'\n    | 'onClickOverlay'\n): (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void {\n  if (hasKey(tool, eventHandlerName)) {\n    return (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void =>\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      tool[eventHandlerName]!(event);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  return (): void => {};\n}\n\nfunction hasKey<O>(obj: O, key: keyof any): key is keyof O {\n  return key in obj;\n}\n\nexport function isRightMouseButton(\n  event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n): boolean {\n  return event.button === 2 || event.buttons === 2;\n}\n\nexport function isLeftMouseButton(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): boolean {\n  return event.button === 1 || event.buttons === 1;\n}\n\nexport function isLeftOrRightMouseButton(\n  event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n): boolean {\n  return isLeftMouseButton(event) || isRightMouseButton(event);\n}\n\n// eslint-disable-next-line max-len\n// adapted from https://stackoverflow.com/questions/11472273/how-to-edit-pixels-and-remove-white-background-in-a-canvas-image-in-html5-and-ja\nexport function extractBrush(\n  sourceCanvas: HTMLCanvasElement,\n  start: Point,\n  width: number,\n  height: number\n): CustomBrush {\n  const bufferCanvas = document.createElement('canvas');\n\n  bufferCanvas.width = Math.abs(width);\n  bufferCanvas.height = Math.abs(height);\n\n  const bufferCanvasCtx = bufferCanvas.getContext('2d');\n  if (!bufferCanvasCtx) {\n    throw 'Error retrieving Context for buffer Canvas while extracting brush';\n  }\n\n  bufferCanvasCtx.drawImage(\n    sourceCanvas,\n    start.x,\n    start.y,\n    width,\n    height,\n    0,\n    0,\n    bufferCanvas.width,\n    bufferCanvas.height\n  );\n\n  const backgroundColor =\n    overmind.state.palette.backgroundColor.r * 0x00000001 +\n    overmind.state.palette.backgroundColor.g * 0x00000100 +\n    overmind.state.palette.backgroundColor.b * 0x00010000 +\n    255 * 0x01000000;\n\n  const imageData = bufferCanvasCtx.getImageData(0, 0, bufferCanvas.width, bufferCanvas.height);\n  const imageDataBufferTMP = new ArrayBuffer(imageData.data.length);\n  const imageDataClamped8TMP = new Uint8ClampedArray(imageDataBufferTMP);\n  const imageDataUint32TMP = new Uint32Array(imageDataBufferTMP);\n\n  imageDataClamped8TMP.set(imageData.data);\n\n  let n = imageDataUint32TMP.length;\n  while (n--) {\n    if (imageDataUint32TMP[n] === backgroundColor) {\n      imageDataUint32TMP[n] = 0x00000000; // make it transparent\n    }\n  }\n\n  imageData.data.set(imageDataClamped8TMP);\n  bufferCanvasCtx.putImageData(imageData, 0, 0);\n\n  // Extract color index and add tansparency for background color\n\n  const colorIndex = paintingCanvasController.getAreaFromIndex(start.x, start.y, width, height);\n  if (!colorIndex) {\n    throw 'Error retrieving color index for new brush';\n  }\n  const colorIndexWithTransparency = addTransparency(\n    colorIndex,\n    Number(overmind.state.palette.backgroundColorId)\n  );\n\n  // invert y\n\n  /*   const colorIndexInverted = new Uint8Array(Math.abs(width) * Math.abs(height) * 4);\n  for (let y = 0; y < bufferCanvas.height; y++) {\n    for (let x = 0; x < bufferCanvas.width * 4; x++) {\n      const index = x + y * bufferCanvas.width * 4;\n      const indexOrig = x + (bufferCanvas.height - 1 - y) * (bufferCanvas.width * 4);\n      colorIndexInverted[index] = colorIndexWithTransparency[indexOrig];\n    }\n  } */\n\n  return new CustomBrush(colorIndexWithTransparency, width, height);\n}\n\nexport function addTransparency(texture: Uint8Array, transparentColorIndex: number): Uint8Array {\n  return texture.map((item) => (item === transparentColorIndex ? 0 : item));\n}\n\ninterface Omit {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  <T extends object, K extends [...(keyof T)[]]>(obj: T, ...keys: K): {\n    [K2 in Exclude<keyof T, K[number]>]: T[K2];\n  };\n}\n\nexport const omit: Omit = (obj, ...keys) => {\n  const ret = {} as {\n    [K in keyof typeof obj]: typeof obj[K];\n  };\n  let key: keyof typeof obj;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n};\n","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/UndoBuffer.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/serviceWorker.ts",["453","454"],"/Users/jani/Code/Web/dxpaint/src/tools/FloodFillTool.tsx",["455","456","457","458"],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/PaintingCanvasController.ts",["459"],"import { overmind } from '../..';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { Line, Point } from '../../types';\nimport { CanvasController } from '../CanvasController';\nimport { ColorIndexer } from './ColorIndexer';\nimport { MainCanvasRenderer } from './MainCanvasRenderer';\nimport { ZoomCanvasRenderer } from '../ZoomCanvasRenderer';\nimport { LineV } from '../../domain/LineV';\nimport { LineH } from '../../domain/LineH';\n\ntype GLBuffers = {\n  colorIndexFramebuffer: WebGLFramebuffer | null;\n  vertexBuffer: WebGLBuffer | null;\n  textureCoordBuffer: WebGLBuffer | null;\n};\n\n// PaintingCanvasController is a singleton responsible for controlling\n// the two painting canvases in the app: MainCanvas and ZoomCanvas.\n// Note that overlay canvases are controlled separately by OverlayCanvasController.\nexport class PaintingCanvasController implements CanvasController {\n  public mainCanvas: HTMLCanvasElement = document.createElement('canvas');\n  private gl: WebGLRenderingContext | null = null;\n\n  private colorIndexer: ColorIndexer | null = null;\n  private mainCanvasRenderer: MainCanvasRenderer | null = null;\n  private zoomCanvasRenderer: ZoomCanvasRenderer | null = null;\n\n  private buffers: GLBuffers = {\n    colorIndexFramebuffer: null,\n    vertexBuffer: null,\n    textureCoordBuffer: null,\n  };\n\n  attachMainCanvas(mainCanvas: HTMLCanvasElement): void {\n    this.mainCanvas = mainCanvas;\n\n    const gl = mainCanvas.getContext('webgl', {\n      preserveDrawingBuffer: true,\n      antialias: false,\n    });\n    if (!gl) {\n      throw 'No webgl';\n    }\n    this.gl = gl;\n\n    this.buffers.vertexBuffer = this.initVertexBuffer();\n    this.buffers.textureCoordBuffer = this.initTextureCoordBuffer();\n    this.buffers.colorIndexFramebuffer = this.initColorIndexFramebuffer();\n\n    this.colorIndexer = new ColorIndexer(gl, {\n      colorIndexFramebuffer: this.buffers.colorIndexFramebuffer,\n      vertexBuffer: this.buffers.vertexBuffer,\n      textureCoordBuffer: this.buffers.textureCoordBuffer,\n    });\n    this.mainCanvasRenderer = new MainCanvasRenderer(gl);\n  }\n\n  attachZoomCanvas(zoomCanvas: HTMLCanvasElement): void {\n    this.zoomCanvasRenderer = new ZoomCanvasRenderer(zoomCanvas);\n  }\n\n  init(): void {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl, call attachMainCanvas() first.';\n    }\n\n    // color index texture always in texture unit 0\n    // palette texture always in texture unit 1\n    // brush texture always in texture unit 2\n\n    this.initColorIndexTexture();\n    this.initPaletteTexture();\n\n    overmind.actions.undo.setUndoPoint(); // initial undo point\n  }\n\n  points(points: Point[], colorIndex: number): void {\n    this.colorIndexer?.points(points, colorIndex);\n    this.mainCanvasRenderer?.points(points);\n    this.zoomCanvasRenderer?.render(this.mainCanvas);\n  }\n\n  lines(lines: (LineH | LineV)[], colorIndex: number): void {\n    this.colorIndexer?.lines(lines, colorIndex);\n    this.mainCanvasRenderer?.lines(lines);\n    this.zoomCanvasRenderer?.render(this.mainCanvas);\n  }\n\n  quad(start: Point, end: Point, colorIndex: number): void {\n    this.colorIndexer?.quad(start, end, colorIndex);\n    this.mainCanvasRenderer?.renderCanvas(); // TODO: renderQuad?\n    this.zoomCanvasRenderer?.render(this.mainCanvas);\n  }\n\n  drawImage(points: Point[], brush: CustomBrush): void {\n    this.colorIndexer?.drawImage(points, brush);\n    this.mainCanvasRenderer?.renderCanvas(); // TODO: renderDrawImage?\n    this.zoomCanvasRenderer?.render(this.mainCanvas);\n    //this.visualiseIndex();\n  }\n\n  render(): void {\n    this.mainCanvasRenderer?.renderCanvas();\n    this.zoomCanvasRenderer?.render(this.mainCanvas);\n  }\n\n  clear(): void {\n    this.initColorIndexTexture();\n    this.render();\n  }\n\n  getIndex(): Uint8Array | undefined {\n    return this.colorIndexer?.getIndex();\n  }\n\n  setIndex(colorIndex: Uint8Array): void {\n    this.colorIndexer?.setIndex(colorIndex);\n  }\n\n  getAreaFromIndex(\n    x: number, // canvas coord (origin upper left corner)\n    y: number, // canvas coord (origin upper left corner)\n    width: number, // canvas coord, can be negative\n    height: number // canvas coord, can be negative\n  ): Uint8Array | undefined {\n    return this.colorIndexer?.getAreaFromIndex(x, y, width, height);\n  }\n\n  // testing, debugging purposes only\n  visualiseIndex(): void {\n    this.colorIndexer?.visualiseIndex();\n  }\n\n  updatePalette(): void {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl';\n    }\n\n    const paletteTexture = new Uint8Array(256 * 4);\n    const palette = overmind.state.palette.paletteArray;\n    for (let i = 0; i < palette.length; i++) {\n      paletteTexture[i * 4 + 0] = palette[i].r;\n      paletteTexture[i * 4 + 1] = palette[i].g;\n      paletteTexture[i * 4 + 2] = palette[i].b;\n      paletteTexture[i * 4 + 3] = 255;\n    }\n    gl.activeTexture(gl.TEXTURE1);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, paletteTexture);\n\n    this.render();\n  }\n\n  private initColorIndexTexture(): void {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl';\n    }\n\n    // Initialize the color index texture.\n    // This texture is used both as a render target (when indexing)\n    // and as source texture (when rendering).\n\n    // As a source texture we store the color index in texture unit 0 so we\n    // call gl.activeTexture before gl.bindTexture\n\n    gl.activeTexture(gl.TEXTURE0);\n\n    const targetTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const targetTextureWidth = overmind.state.canvas.resolution.width;\n    const targetTextureHeight = overmind.state.canvas.resolution.height;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    // initialize the color index matrix with the background color\n    const backgroundColor = Number(overmind.state.palette.backgroundColorId);\n    const data = new Uint8Array(targetTextureHeight * targetTextureWidth * 4).fill(backgroundColor);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      level,\n      internalFormat,\n      targetTextureWidth,\n      targetTextureHeight,\n      border,\n      format,\n      type,\n      data\n    );\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    gl.viewport(0, 0, targetTextureWidth, targetTextureHeight);\n\n    // attach the texture as the first color attachment of the framebuffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.buffers.colorIndexFramebuffer);\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture, level);\n  }\n\n  private initPaletteTexture(): void {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl';\n    }\n\n    const paletteTexture = new Uint8Array(256 * 4);\n    const palette = overmind.state.palette.paletteArray;\n    for (let i = 0; i < palette.length; i++) {\n      paletteTexture[i * 4 + 0] = palette[i].r;\n      paletteTexture[i * 4 + 1] = palette[i].g;\n      paletteTexture[i * 4 + 2] = palette[i].b;\n      paletteTexture[i * 4 + 3] = 255;\n    }\n\n    // We store the palette as a source texture in texture unit 1 so we\n    // call gl.activeTexture before gl.bindTexture\n\n    gl.activeTexture(gl.TEXTURE1);\n\n    const paletteTex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, paletteTex);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, paletteTexture);\n  }\n\n  private initColorIndexFramebuffer(): WebGLFramebuffer {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl';\n    }\n    // Create a framebuffer for rendering to this texture and store the reference.\n\n    const fb = gl.createFramebuffer();\n    if (!fb) {\n      throw 'Failed to create framebuffer for color index';\n    }\n    return fb;\n  }\n\n  private initVertexBuffer(): WebGLBuffer {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl';\n    }\n\n    // Create a common buffer object for vertex coordinates.\n    // This will be used by all shaders.\n    const vertexBuffer = gl.createBuffer();\n    if (!vertexBuffer) {\n      throw 'Failed to create a buffer object for vertex coordinates';\n    }\n\n    // Bind the buffer object to target (this is the default)\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n    return vertexBuffer;\n  }\n\n  private initTextureCoordBuffer(): WebGLBuffer {\n    const gl = this.gl;\n    if (!gl) {\n      throw 'No webgl';\n    }\n\n    // Create a buffer object for texture coordinates\n    const textureCoordBuffer = gl.createBuffer();\n    if (!textureCoordBuffer) {\n      throw 'Failed to create the buffer object (textureCoordBuffer)';\n    }\n\n    return textureCoordBuffer;\n  }\n}\n\nexport const paintingCanvasController = new PaintingCanvasController();\n","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayCanvasController.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayGeometricRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayMainCanvasRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/util/util.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/ZoomCanvasRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/ColorIndexer.ts",["460"],"import { GeometricIndexer } from './program/GeometricIndexer';\nimport { DrawImageIndexer } from './program/DrawImageIndexer';\nimport { Line, Point } from '../../types';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { visualiseTexture } from '../util/util';\nimport { LineV } from '../../domain/LineV';\nimport { LineH } from '../../domain/LineH';\nimport { overmind } from '../..';\n\ntype GLBuffers = {\n  colorIndexFramebuffer: WebGLFramebuffer;\n  vertexBuffer: WebGLBuffer;\n  textureCoordBuffer: WebGLBuffer;\n};\n\nexport class ColorIndexer {\n  private gl: WebGLRenderingContext;\n  private colorIndexFramebuffer: WebGLFramebuffer;\n  private geometricIndexer: GeometricIndexer;\n  private drawImageIndexer: DrawImageIndexer;\n\n  constructor(gl: WebGLRenderingContext, buffers: GLBuffers) {\n    this.gl = gl;\n    this.colorIndexFramebuffer = buffers.colorIndexFramebuffer;\n\n    // create indexers\n\n    this.geometricIndexer = new GeometricIndexer(gl, buffers.colorIndexFramebuffer);\n    this.drawImageIndexer = new DrawImageIndexer(gl, buffers);\n  }\n\n  points(points: Point[], colorIndex: number): void {\n    this.geometricIndexer.indexPoints(points, colorIndex);\n  }\n\n  lines(lines: (LineH | LineV)[], colorIndex: number): void {\n    this.geometricIndexer.indexLines(lines, colorIndex);\n  }\n\n  quad(start: Point, end: Point, colorIndex: number): void {\n    this.geometricIndexer.indexQuad(start, end, colorIndex);\n  }\n\n  drawImage(points: Point[], brush: CustomBrush): void {\n    this.drawImageIndexer.indexDrawImage(points, brush);\n  }\n\n  getIndex(): Uint8Array {\n    const gl = this.gl;\n\n    const width = overmind.state.canvas.resolution.width;\n    const height = overmind.state.canvas.resolution.height;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.colorIndexFramebuffer);\n    this.colorIndexFramebuffer;\n    const pixels = new Uint8Array(width * height * 4);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return pixels;\n  }\n\n  setIndex(colorIndex: Uint8Array): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0);\n\n    const targetTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const targetTextureWidth = overmind.state.canvas.resolution.width;\n    const targetTextureHeight = overmind.state.canvas.resolution.height;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      level,\n      internalFormat,\n      targetTextureWidth,\n      targetTextureHeight,\n      border,\n      format,\n      type,\n      colorIndex\n    );\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    gl.viewport(0, 0, targetTextureWidth, targetTextureHeight);\n\n    // attach the texture as the first color attachment of the framebuffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.colorIndexFramebuffer);\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture, level);\n  }\n\n  getAreaFromIndex(\n    x: number, // canvas coord (origin upper left corner)\n    y: number, // canvas coord (origin upper left corner)\n    width: number, // canvas coord, can be negative\n    height: number // canvas coord, can be negative\n  ): Uint8Array | undefined {\n    const gl = this.gl;\n\n    // for readPixels we need to define the area with:\n    // - lower left corner of the area and\n    // - width and height as positive integers\n    // Texture coordinates\n\n    let rectLowerLeftX: number;\n    let rectLowerLeftY: number;\n\n    if (width < 0) {\n      rectLowerLeftX = x - Math.abs(width);\n    } else {\n      rectLowerLeftX = x;\n    }\n\n    if (height < 0) {\n      rectLowerLeftY = gl.drawingBufferHeight - y;\n    } else {\n      rectLowerLeftY = gl.drawingBufferHeight - y - Math.abs(height);\n    }\n\n    const pixels = new Uint8Array(Math.abs(width) * Math.abs(height) * 4);\n    console.log('canvas: x:' + x + ' y: ' + y + ' w: ' + width + ' h: ' + height);\n    console.log(\n      'texture: x:' +\n        rectLowerLeftX +\n        ' y: ' +\n        rectLowerLeftY +\n        ' w: ' +\n        Math.abs(width) +\n        ' h: ' +\n        Math.abs(height)\n    );\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.colorIndexFramebuffer);\n    gl.readPixels(\n      rectLowerLeftX,\n      rectLowerLeftY,\n      Math.abs(width),\n      Math.abs(height),\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    );\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return pixels;\n  }\n\n  // testing, debugging purposes only\n  visualiseIndex(): void {\n    const gl = this.gl;\n\n    const index = this.getIndex();\n    const width = gl.drawingBufferWidth;\n    visualiseTexture(index, width);\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/MainCanvasRenderer.ts",["461"],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayDrawImageRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/domain/LineV.ts",[],"/Users/jani/Code/Web/dxpaint/src/domain/LineH.ts",[],"/Users/jani/Code/Web/dxpaint/src/domain/Line.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/util/webglUtil.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxButtonHoverManager.tsx",[],{"ruleId":"462","severity":1,"message":"463","line":56,"column":20,"nodeType":"464","messageId":"465","endLine":56,"endColumn":74},{"ruleId":"462","severity":1,"message":"463","line":61,"column":23,"nodeType":"464","messageId":"465","endLine":61,"endColumn":77},{"ruleId":"462","severity":1,"message":"463","line":83,"column":29,"nodeType":"464","messageId":"465","endLine":83,"endColumn":83},{"ruleId":"462","severity":1,"message":"463","line":87,"column":30,"nodeType":"464","messageId":"465","endLine":87,"endColumn":84},{"ruleId":"462","severity":1,"message":"466","line":4,"column":10,"nodeType":"464","messageId":"465","endLine":4,"endColumn":19},{"ruleId":"462","severity":1,"message":"463","line":158,"column":30,"nodeType":"464","messageId":"465","endLine":158,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":59,"column":20,"nodeType":"464","messageId":"465","endLine":59,"endColumn":74},{"ruleId":"462","severity":1,"message":"463","line":83,"column":29,"nodeType":"464","messageId":"465","endLine":83,"endColumn":83},{"ruleId":"462","severity":1,"message":"463","line":87,"column":30,"nodeType":"464","messageId":"465","endLine":87,"endColumn":84},{"ruleId":"467","severity":1,"message":"468","line":22,"column":26,"nodeType":"469","messageId":"470","endLine":22,"endColumn":39},{"ruleId":"462","severity":1,"message":"463","line":63,"column":30,"nodeType":"464","messageId":"465","endLine":63,"endColumn":84},{"ruleId":"462","severity":1,"message":"466","line":4,"column":10,"nodeType":"464","messageId":"465","endLine":4,"endColumn":19},{"ruleId":"462","severity":1,"message":"471","line":25,"column":11,"nodeType":"464","messageId":"465","endLine":25,"endColumn":16},{"ruleId":"462","severity":1,"message":"472","line":26,"column":11,"nodeType":"464","messageId":"465","endLine":26,"endColumn":14},{"ruleId":"462","severity":1,"message":"463","line":30,"column":30,"nodeType":"464","messageId":"465","endLine":30,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":34,"column":25,"nodeType":"464","messageId":"465","endLine":34,"endColumn":79},{"ruleId":"462","severity":1,"message":"463","line":71,"column":30,"nodeType":"464","messageId":"465","endLine":71,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":70,"column":29,"nodeType":"464","messageId":"465","endLine":70,"endColumn":83},{"ruleId":"462","severity":1,"message":"463","line":113,"column":30,"nodeType":"464","messageId":"465","endLine":113,"endColumn":84},{"ruleId":"462","severity":1,"message":"473","line":1,"column":17,"nodeType":"464","messageId":"465","endLine":1,"endColumn":25},{"ruleId":"462","severity":1,"message":"474","line":2,"column":35,"nodeType":"464","messageId":"465","endLine":2,"endColumn":45},{"ruleId":"462","severity":1,"message":"475","line":52,"column":9,"nodeType":"464","messageId":"465","endLine":52,"endColumn":19},{"ruleId":"462","severity":1,"message":"476","line":4,"column":10,"nodeType":"464","messageId":"465","endLine":4,"endColumn":21},{"ruleId":"462","severity":1,"message":"477","line":7,"column":52,"nodeType":"464","messageId":"465","endLine":7,"endColumn":57},{"ruleId":"462","severity":1,"message":"477","line":45,"column":37,"nodeType":"464","messageId":"465","endLine":45,"endColumn":42},{"ruleId":"462","severity":1,"message":"466","line":4,"column":10,"nodeType":"464","messageId":"465","endLine":4,"endColumn":19},{"ruleId":"462","severity":1,"message":"463","line":42,"column":23,"nodeType":"464","messageId":"465","endLine":42,"endColumn":77},{"ruleId":"462","severity":1,"message":"478","line":49,"column":11,"nodeType":"464","messageId":"465","endLine":49,"endColumn":19},{"ruleId":"462","severity":1,"message":"463","line":60,"column":30,"nodeType":"464","messageId":"465","endLine":60,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":64,"column":27,"nodeType":"464","messageId":"465","endLine":64,"endColumn":81},{"ruleId":"462","severity":1,"message":"479","line":2,"column":43,"nodeType":"464","messageId":"465","endLine":2,"endColumn":47},{"ruleId":"462","severity":1,"message":"466","line":5,"column":10,"nodeType":"464","messageId":"465","endLine":5,"endColumn":19},{"ruleId":"462","severity":1,"message":"463","line":94,"column":30,"nodeType":"464","messageId":"465","endLine":94,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":98,"column":27,"nodeType":"464","messageId":"465","endLine":98,"endColumn":81},{"ruleId":"462","severity":1,"message":"480","line":4,"column":10,"nodeType":"464","messageId":"465","endLine":4,"endColumn":34},{"ruleId":"462","severity":1,"message":"478","line":13,"column":11,"nodeType":"464","messageId":"465","endLine":13,"endColumn":19},{"ruleId":"462","severity":1,"message":"481","line":2,"column":10,"nodeType":"464","messageId":"465","endLine":2,"endColumn":20},{"ruleId":"462","severity":1,"message":"482","line":37,"column":38,"nodeType":"464","messageId":"465","endLine":37,"endColumn":50},{"ruleId":"462","severity":1,"message":"483","line":37,"column":52,"nodeType":"464","messageId":"465","endLine":37,"endColumn":62},{"ruleId":"462","severity":1,"message":"484","line":44,"column":45,"nodeType":"464","messageId":"465","endLine":44,"endColumn":59},{"ruleId":"462","severity":1,"message":"466","line":3,"column":10,"nodeType":"464","messageId":"465","endLine":3,"endColumn":19},{"ruleId":"462","severity":1,"message":"463","line":84,"column":30,"nodeType":"464","messageId":"465","endLine":84,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":88,"column":27,"nodeType":"464","messageId":"465","endLine":88,"endColumn":81},{"ruleId":"462","severity":1,"message":"466","line":3,"column":10,"nodeType":"464","messageId":"465","endLine":3,"endColumn":19},{"ruleId":"462","severity":1,"message":"463","line":60,"column":25,"nodeType":"464","messageId":"465","endLine":60,"endColumn":79},{"ruleId":"462","severity":1,"message":"478","line":69,"column":13,"nodeType":"464","messageId":"465","endLine":69,"endColumn":21},{"ruleId":"462","severity":1,"message":"463","line":74,"column":30,"nodeType":"464","messageId":"465","endLine":74,"endColumn":84},{"ruleId":"462","severity":1,"message":"463","line":80,"column":30,"nodeType":"464","messageId":"465","endLine":80,"endColumn":84},{"ruleId":"462","severity":1,"message":"479","line":2,"column":43,"nodeType":"464","messageId":"465","endLine":2,"endColumn":47},{"ruleId":"462","severity":1,"message":"463","line":38,"column":20,"nodeType":"464","messageId":"465","endLine":38,"endColumn":74},{"ruleId":"462","severity":1,"message":"463","line":43,"column":23,"nodeType":"464","messageId":"465","endLine":43,"endColumn":77},{"ruleId":"462","severity":1,"message":"463","line":65,"column":29,"nodeType":"464","messageId":"465","endLine":65,"endColumn":83},{"ruleId":"462","severity":1,"message":"463","line":69,"column":30,"nodeType":"464","messageId":"465","endLine":69,"endColumn":84},{"ruleId":"485","severity":1,"message":"486","line":77,"column":39,"nodeType":"487","messageId":"488","endLine":77,"endColumn":42,"suggestions":"489"},{"ruleId":"490","severity":1,"message":"491","line":26,"column":8,"nodeType":"492","messageId":"493","endLine":26,"endColumn":42},{"ruleId":"490","severity":1,"message":"491","line":133,"column":8,"nodeType":"492","messageId":"493","endLine":133,"endColumn":29},{"ruleId":"462","severity":1,"message":"494","line":4,"column":10,"nodeType":"464","messageId":"465","endLine":4,"endColumn":18},{"ruleId":"462","severity":1,"message":"478","line":15,"column":11,"nodeType":"464","messageId":"465","endLine":15,"endColumn":19},{"ruleId":"462","severity":1,"message":"478","line":25,"column":11,"nodeType":"464","messageId":"465","endLine":25,"endColumn":19},{"ruleId":"462","severity":1,"message":"495","line":59,"column":10,"nodeType":"464","messageId":"465","endLine":59,"endColumn":19},{"ruleId":"462","severity":1,"message":"496","line":3,"column":10,"nodeType":"464","messageId":"465","endLine":3,"endColumn":14},{"ruleId":"462","severity":1,"message":"496","line":3,"column":10,"nodeType":"464","messageId":"465","endLine":3,"endColumn":14},{"ruleId":"462","severity":1,"message":"496","line":3,"column":10,"nodeType":"464","messageId":"465","endLine":3,"endColumn":14},"@typescript-eslint/no-unused-vars","'event' is defined but never used.","Identifier","unusedVar","'selection' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'useState' is defined but never used.","'Typography' is defined but never used.","'colorMarks' is assigned a value but never used.","'CustomBrush' is defined but never used.","'state' is defined but never used.","'mousePos' is assigned a value but never used.","'omit' is defined but never used.","'paintingCanvasController' is defined but never used.","'PixelBrush' is defined but never used.","'start' is defined but never used.","'end' is defined but never used.","'height' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["497","498"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'overmind' is defined but never used.","'floodFill' is defined but never used.","'Line' is defined but never used.",{"messageId":"499","fix":"500","desc":"501"},{"messageId":"502","fix":"503","desc":"504"},"suggestUnknown",{"range":"505","text":"506"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"505","text":"507"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[2612,2615],"unknown","never"]